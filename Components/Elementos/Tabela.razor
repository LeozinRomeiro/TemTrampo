@inherits LayoutComponentBase
@inject AppDbContext _context
@inject ISnackbar Snackbar
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (Vagas == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudDataGrid MultiSelection="true" Items="@Vagas" SortMode="SortMode.Multiple" Filterable="true" Culture="@(new CultureInfo("pt-br"))" Hideable="true">

        <Columns>
            <PropertyColumn Property="x => x.Titulo" Title="Vaga" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.Descricao" />
            <PropertyColumn Property="x => x.Requisito" />
            <PropertyColumn Property="x => x.Escolaridade" />
            <PropertyColumn Property="x => x.Desejavel" />
            <PropertyColumn Property="x => x.Beneficios" />
            @if (!MinhasVagas)
            {
                <PropertyColumn Property="x => x.Empresa" />
                <PropertyColumn Property="x => x.Email" />
                <PropertyColumn Property="x => x.Numero" />
            }
            else
            {
                <TemplateColumn StickyRight="true" Filterable="false" Sortable="false" Title="Operadores" Class="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" Color="Color.Dark"  />
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" Color="Color.Primary" OnClick="() => DeletarAsync(context.Item)" />
                    </CellTemplate>
                </TemplateColumn>
            }
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Vaga" RowsPerPageString="Linhas por página" />
        </PagerContent>
    </MudDataGrid>

}

@code {
    [Parameter]
    public bool MinhasVagas { get; set; } = true;
    [Parameter]
    [EditorRequired]
    public List<Vaga>? Vagas { get; set; }

    private async Task DeletarAsync(Vaga vaga)
    {
        try
        {
            _context.Remove(vaga);
            await _context.SaveChangesAsync();
            Vagas.Remove(vaga); // Atualize a lista local para reflexão imediata da IU
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}