@inject AppDbContext _context
@inject ISnackbar Snackbar

<MudDialog>
    <DialogActions>
        <MudButton Variant="Variant.Filled"  Color="Color.Surface" OnClick="Cancel">Cancelar</MudButton>
    </DialogActions>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="@SubmeterValido">
            <DataAnnotationsValidator />
            <MudGrid Justify="Justify.Center" Style="align-items">
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Align="Align.Center">
                    </MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField @bind-Value="@model.Titulo" Label="Titulo" For="@(() => model.Titulo)" />

                            <MudTextField Lines="10" @bind-Value="@model.Descricao" Label="Descricao" For="@(() => model.Descricao)" />
                            <MudTextField @bind-Value="@model.Empresa" Label="Empresa" For="@(() => model.Empresa)" />
                            <MudTextField @bind-Value="@model.Escolaridade" Label="Escolaridade" For="@(() => model.Escolaridade)" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField @bind-Value="@model.Email" Label="Email" InputType="InputType.Email" For="@(() => model.Email)" />
                            <MudTextField @bind-Value="@model.Numero" Label="Numero" For="@(() => model.Numero)" InputType="InputType.Telephone" />
                            <MudTextField Lines="3" @bind-Value="@model.Requisito" Label="Requisito" For="@(() => model.Requisito)" />
                            <MudTextField Lines="3" @bind-Value="@model.Desejavel" Label="Desejavel" For="@(() => model.Desejavel)" />
                            <MudTextField Lines="3" @bind-Value="@model.Beneficios" Label="Beneficios" For="@(() => model.Beneficios)" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudCardActions Class="d-flex align-items-center">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@OperacaoTexto</MudButton>
                </MudCardActions>
            </MudGrid>
        </EditForm>
    </DialogContent>

</MudDialog>


@code {
    [Parameter]
    public VagaViewModel model { get; set; } = new VagaViewModel();
    [Parameter]
    public Vaga? vaga { get; set; }
    [Parameter]
    public EventCallback RecarregarVagas { get; set; }
    private string OperacaoTexto = "Cadastrar";
    protected override void OnInitialized()
    {
        if (vaga != null)
        {
            model = new VagaViewModel
                {
                    Titulo = vaga.Titulo,
                    Numero = vaga.Numero,
                    Email = vaga.Email,
                    Empresa = vaga.Empresa,
                    Escolaridade = vaga.Escolaridade,
                    Descricao = vaga.Descricao,
                    Requisito = vaga.Requisito,
                    Desejavel = vaga.Desejavel,
                    Beneficios = vaga.Beneficios
                };
            OperacaoTexto = "Salvar";
        }
        else
        {
            OperacaoTexto = "Cadastrar";
        }
    }


    private async Task SubmeterValido()
    {
        try
        {
            if (vaga != null)
            {
                vaga.Titulo = model.Titulo;
                vaga.Numero = model.Numero;
                vaga.Email = model.Email;
                vaga.Empresa = model.Empresa;
                vaga.Escolaridade = model.Escolaridade;
                vaga.Descricao = model.Descricao;
                vaga.Requisito = model.Requisito;
                vaga.Desejavel = model.Desejavel;
                vaga.Beneficios = model.Beneficios;

                _context.Vagas.Update(vaga);
                await _context.SaveChangesAsync();
            }
            else
            {
                var vagaValidada = new Vaga
                    {
                        Titulo = model.Titulo,
                        Numero = model.Numero,
                        Email = model.Email,
                        Empresa = model.Empresa,
                        Escolaridade = model.Escolaridade,
                        Descricao = model.Descricao,
                        Requisito = model.Requisito,
                        Desejavel = model.Desejavel,
                        Beneficios = model.Beneficios

                    };
                await _context.Vagas.AddAsync(vagaValidada);
                await _context.SaveChangesAsync();
            }
            Snackbar.Add("Vaga registrada com sucesso", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
            if (RecarregarVagas.HasDelegate)
            {
                await RecarregarVagas.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}